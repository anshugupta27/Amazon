https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/




class Solution
{
    public:
    Node* nextParentWithChild ( Node* root )
    {
        if ( !root || root -> left || root -> right ) return root ;
        return nextParentWithChild ( root -> next ) ;
    }
    void connectSameLevel(Node *root)
    {
        if (!root) return;
        if (root->left and root->right)  root->left->next = root->right;
       
            Node* nextParentWithChildNode = nextParentWithChild ( root -> next ) ;
            if (root->right and nextParentWithChildNode and nextParentWithChildNode ->left)
            {
                root->right->next = nextParentWithChildNode->left;
            }
            else if (root->right and nextParentWithChildNode  and nextParentWithChildNode ->right)
            {
                root->right->next = nextParentWithChildNode ->right;
            }
            else if (root->left and nextParentWithChildNode  and nextParentWithChildNode ->left)
            {
                root->left->next = nextParentWithChildNode ->left;
            }
            else if (root->left and nextParentWithChildNode and nextParentWithChildNode->right)
            {
                root->left->next = nextParentWithChildNode->right;
            }
         
        connectSameLevel(nextParentWithChildNode );
    }
    Node* nextParent(Node *root)
    {
        if (!root) return NULL;
        if (root->left) return root->left;
        if (root->right) return root->right;
        return nextParent(root->next);
    }
    void connectUtil(Node *root)
    {
        if (!root) return;
        connectSameLevel(root);
        Node *nextParentNode = nextParent(root);
        connectUtil(nextParentNode);
    }
    Node* connect(Node *root)
    {
        connectUtil(root);
        return root;
    }
};
