https://leetcode.com/problems/minimum-falling-path-sum/


class Solution {
public:
    bool isValid ( int row , int col , vector<vector<int>> &matrix )
    {
        if ( row < 0 || col < 0 || row >= matrix.size() || col >= matrix[0].size() ) return false ; 
        return true ; 
    }
    int minFallingPathSumUtil ( int row , int col , vector<vector<int>>& matrix , vector<vector<int>> &dp )
    {
        if ( !isValid (row,col,matrix) ) return INT_MAX ; 
        if ( dp[row][col] != -1 ) return dp[row][col] ;
        int down = minFallingPathSumUtil ( row+1 , col , matrix , dp ) ;
        int downLeft = minFallingPathSumUtil ( row+1 , col-1 , matrix , dp ) ;
        int downRight = minFallingPathSumUtil ( row+1 , col+1 , matrix , dp ) ;
        int MinAns = min({down,downLeft,downRight}) ;
        return dp[row][col] = MinAns == INT_MAX ? matrix[row][col] : matrix[row][col] + MinAns ;
          
        
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size() , m = matrix[0].size() , finalAns = INT_MAX ;
        vector<vector<int>>dp(n,vector<int>(m,-1)) ;
        for ( int i = 0 ; i < m ; i++ )
        {
            int ans = minFallingPathSumUtil ( 0 , i  , matrix , dp ) ;
            finalAns = min ( ans , finalAns ) ;
        }
        return finalAns ; 
        
    }
};
