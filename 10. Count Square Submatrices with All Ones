https://leetcode.com/problems/count-square-submatrices-with-all-ones/


class Solution {
public:
    int countSquare ( int n )
    {
        return n-1 ; 
    }
    int countSquaresUtil ( int i , int j , vector<vector<int>>& matrix, vector<vector<int>>&dp) 
    {
        if ( i < 0 || j < 0 || i >= matrix.size() || j >= matrix[0].size() ) return 0 ; 
        if ( dp[i][j] != -1 ) return dp[i][j] ;
        int right = countSquaresUtil ( i , j+1 , matrix, dp ) ;
        int diagonalRight = countSquaresUtil ( i+1 , j+1 , matrix , dp ) ;
        int down = countSquaresUtil ( i+1 , j , matrix , dp ) ;
        if ( matrix[i][j] == 1 )
        {
            int MaxAns = min ( { right , diagonalRight , down} ) ;
            return dp[i][j] = 1 + MaxAns ; 
        }
        return dp[i][j] = 0 ; 
    }
    int countSquares(vector<vector<int>>& matrix) {
        int n = matrix.size() , m = matrix[0].size() ;
        vector<vector<int>>dp(n,vector<int>(m,-1)) ;
        int sum = 0 , i = 0 , j = 0 ; 
        countSquaresUtil ( i , j , matrix  , dp ) ;
        for ( int i = 0 ; i < n ; i++ )
        {
            for ( int j = 0 ; j < m ; j++ )
            {
                sum += dp[i][j] ;
            }
           
        }
        return sum ; 
    }
};
