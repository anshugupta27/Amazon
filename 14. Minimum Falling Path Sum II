https://leetcode.com/problems/minimum-falling-path-sum-ii/




class Solution {
public:
    int minFallingPathSumUtil ( int row , vector<vector<int>>& grid , int prevj , vector<vector<int>> &dp) 
    {
        if ( row >= grid.size() ) return INT_MAX ; 
        if ( dp[row][prevj] != -1 ) return dp[row][prevj] ;
        int MinAns = INT_MAX ; 
        for ( int i = 0 ; i < grid[0].size() ; i++ )
        {
            if ( i != prevj )
            {
                
                int x = minFallingPathSumUtil ( row+1 , grid , i , dp ) ;
                x = x == INT_MAX ? 0 : x ; 
                MinAns = min ( MinAns , x+grid[row][i] ) ;
                
            }
        }
        return  dp[row][prevj] = MinAns ; 
    }
    int minFallingPathSum(vector<vector<int>>& grid) {
        int row = grid.size() , col = grid[0].size() ;
        vector<vector<int>>dp(row+1,vector<int>(col+1,-1)) ; 
        
        return minFallingPathSumUtil ( 0 , grid , col , dp ) ;
        
    }
};
